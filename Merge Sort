class Solution
{
    public:
    void solve(int arr[] , int s , int e){
         int mid = (s + e) / 2;
         
         vector<int> vec(e - s + 1);
         
         int start = s;
         int end = mid + 1;
         int i = 0;
         
         while(start <= mid && end <= e){
              if(arr[start] <= arr[end]){
                  vec[i++] = arr[start++];
              }
              else{
                  vec[i++] = arr[end++];
              }
         }
         
         while(start <= mid){
             vec[i++] = arr[start++];
         }
         
         while(end <= e){
              vec[i++] = arr[end++];
         }
         
         for(int j = 0;j< vec.size();j++){
              arr[j + s] = vec[j];
         }
    } 
    
    void merge(int arr[], int s, int e)
    {
         // Your code here
         if(s >= e){
            return;
        }
        
        int mid = (s + e) / 2;
        
        merge(arr , s , mid);
        merge(arr , mid + 1 , e);
        
        solve(arr , s , e);
    }
    public:
    void mergeSort(int arr[], int l, int r)
    {
        //code here
        int s = l;
        int e = r;
        merge(arr , s , e);
    }
};
