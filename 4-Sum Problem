//Brute force for this problem is Using four Loops
// Better Approch for this is using 3 loop and Using SET Data Structure (Same as Sum-3 Problem)

//Optimal Approch for this is using Two Pointer approch
class Solution {
public:
    vector<vector<int>> fourSum(vector<int>& nums, int target) {
        int n = nums.size();
        sort(nums.begin() , nums.end());
        vector<vector<int>> ans;
        for(int i = 0;i<n;i++){
            if(i > 0 && nums[i] == nums[i - 1]) continue;

            for(int j = i + 1;j<n;j++){
                if( j > i + 1  && nums[j] == nums[j - 1]) continue;

               int k = j + 1;
               int m = n - 1;

               while(k < m){
                 long long sum  = nums[i];
                 sum += nums[j];
                 sum += nums[k];
                 sum += nums[m];
             
                  if(sum < target){
                     k++;
                  }

                  else if(sum > target){
                      m--;
                  }

                  else{
                     vector<int> vec = {nums[i]  , nums[j] , nums[k] , nums[m]};
                     ans.push_back(vec);

                     k++;
                     m--;

                     while(k < m && nums[k-1] == nums[k]){
                         k++;
                     }

                     while(k < m && nums[m] == nums[m+1]){
                        m--;
                     }
                  }
               }
            }
        }

        return ans;
    }
};
