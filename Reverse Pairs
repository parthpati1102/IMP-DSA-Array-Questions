class Solution {
    private:
    
    int solve(vector<int>& nums , int s , int e){
           int mid = (s + e) / 2;
           int count = 0;
           vector<int> vec;

            int j = mid + 1;
            for (int i = s; i <= mid; i++) {
                while (j <= e && nums[i] > 2LL* nums[j]) {
                    j++;
                }
                count += (j - (mid + 1)); 
            }

           int left = s;
           int right = mid + 1;

           while(left <= mid && right <= e){
                if(nums[left] <= nums[right]){
                    vec.push_back(nums[left]);
                    left++;
                }

                else {
                    vec.push_back(nums[right]);
                    right++;
                }
           }

           while(left <= mid){
                vec.push_back(nums[left]);
                left++;
           }

           while(right <= e){
                vec.push_back(nums[right]);
                right++;
           }

           for(int i = s;i<=e;i++){
               nums[i] = vec[i - s];
           }

           return count;
    }

    int mergeSort(vector<int>& nums , int s , int e){

        int count = 0;

        if(s >= e){
            return count;
        }

        int mid = (s + e) / 2;

        count += mergeSort(nums , s , mid);
        count += mergeSort(nums , mid + 1 , e);

        count += solve(nums , s , e);

        return count;
    }
public:
    int reversePairs(vector<int>& nums) {
         int s = 0;
         int e = nums.size() - 1;

        return mergeSort(nums , s , e);
    }
};
